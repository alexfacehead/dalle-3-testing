from typing import Optional, List
import openai
from dotenv import load_dotenv
from termcolor import colored
import os

current_env = load_dotenv()
openai_key = os.getenv('OPENAI_API_KEY')
chosen_model = os.getenv('MODEL')


class ChatCompletionGenerator:
    def __init__(self, temperature: Optional[float]=0.33, openai_api_key: Optional[str] = openai_key, model: Optional[str] = chosen_model):
        """
        Constructor for the SystemMessageMaker class.
        
        Args:
            openai_api_key (str, optional): The API key for OpenAI. Defaults to None.
            model (str, optional): The model for OpenAI. Defaults to None.
            super_charged (str, optional): The super charged mode for GPT-4. Defaults to None.
        """
        self.openai_api_key = openai_key
        self.model = chosen_model
        openai.api_key = self.openai_api_key
        self.temperature = temperature

    def generate_completion(self, messages: List[dict], temperature: Optional[float]=0.1, model: Optional[str] = "gpt-3.5-turbo-16k-0613") -> str:
        print(f"MODEL ACTUALLY BEING USED: {model}")
        """
        Generates a completion using OpenAI's ChatCompletion API.

        Args:
            messages (List[dict]): A list of messages to start the completion. Each message is a dictionary containing 'role' and 'content' keys.
            model (str, optional): The model to use for the completion. Defaults to "gpt-3.5-turbo".
            temperature (float, optional): The higher the number used, the more statistical variation / randomness. Between 0.1-0.5 is reocmmended for coding and facts.

        Returns:
            str: The content of the completion generated by the model.
        """
        print(colored("\nGenerating completion with model ...\n", 'magenta'))

        response = openai.ChatCompletion.create(
            model=model,
            messages = messages,
            max_tokens = 4000,
            temperature = temperature
        )
        print(colored("--Successfully completed last API call--\n", 'blue'))
        return response['choices'][0]['message']['content']